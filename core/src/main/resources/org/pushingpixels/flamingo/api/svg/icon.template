${PACKAGE}

import java.awt.*;
import java.awt.geom.*;
import java.awt.image.*;
import static java.awt.Color.*;
import static java.awt.MultipleGradientPaint.CycleMethod.*;
import static java.awt.MultipleGradientPaint.ColorSpaceType.*;

/**
 * This class has been automatically generated using
 * <a href="http://ebourg.github.io/flamingo-svg-transcoder/">Flamingo SVG transcoder</a>.
 */
public class ${CLASSNAME} implements javax.swing.Icon {

    /** The width of this icon. */
    private int width;

    /** The height of this icon. */
    private int height;

    /** The rendered image. */
    private BufferedImage image;

	private double scaleFactor;

    /**
     * Creates a new transcoded SVG image.
     */
    public ${CLASSNAME}() {
        this(${WIDTH}, ${HEIGHT});
    }

    /**
     * Creates a new transcoded SVG image.
     */
    public ${CLASSNAME}(int width, int height) {
        this.width = width;
        this.height = height;
    }

    @Override
    public int getIconHeight() {
        return height;
    }

    @Override
    public int getIconWidth() {
        return width;
    }

	private int getRealWidth(){
	       return Double.valueOf(Integer.valueOf(width).doubleValue() * scaleFactor).intValue();
    }

    private int getRealHeight(){
        return Double.valueOf(Integer.valueOf(height).doubleValue() * scaleFactor).intValue();
    }

    private static double getScaleFactor() {
        final GraphicsConfiguration gfxConfig = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();
        final AffineTransform transform = gfxConfig.getDefaultTransform();
        return transform.getScaleX();
    }

    @Override
    public void paintIcon(Component c, Graphics g, int x, int y) {
        if (image == null) {

            image = new BufferedImage(getRealWidth(), getRealHeight(), BufferedImage.TYPE_INT_ARGB);
            double coef = Math.min((double) width / (double) ${WIDTH}, (double) height / (double) ${HEIGHT});

            Graphics2D g2d = image.createGraphics();
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.scale(coef * scaleFactor, coef * scaleFactor);
            paint(g2d);
            g2d.dispose();
        }

        g.drawImage(image, x, y, getIconWidth(), getIconHeight(), null);

    }

    /**
     * Paints the transcoded SVG image on the specified graphics context.
     * 
     * @param g Graphics context.
     */
    private static void paint(Graphics2D g) {
        Shape shape = null;
        
        float origAlpha = 1.0f;
        
        java.util.LinkedList<AffineTransform> transformations = new java.util.LinkedList<AffineTransform>();
        
${PAINTING_CODE}
    }
}
